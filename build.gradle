plugins {
    id 'java-library'
    id 'maven-publish'
    id "com.github.ben-manes.versions" version "0.39.0"
}

description = 'Easy Rest Client'
group = 'ch.frostnova.easy-rest-client'
version = '1.0.0-SNAPSHOT'

defaultTasks 'clean', 'build'

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://jitpack.io" }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
    withJavadocJar()
    withSourcesJar()
}
test {
    useJUnitPlatform()
}

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        mavenLocal()
    }
}
ext {
    jaxrsVersion = '2.0'
    jacksonVersion = '2.13.0'

    springBootVersion = '2.5.7'
    slf4jVersion = '1.7.+'
    logbackVersion = '1.2.3'

    junitVersion = '5.8.1'
    assertjVersion = '3.21.0'

    libs = [
            runtime        : [
                    "org.slf4j:slf4j-api:${slf4jVersion}",
                    "javax.ws.rs:javax.ws.rs-api:$jaxrsVersion",
                    "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion",
                    "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
                    "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion",
            ],
            test           : [
                    "org.junit.jupiter:junit-jupiter-api:$junitVersion",
                    "org.junit.jupiter:junit-jupiter-engine:$junitVersion",
                    "org.assertj:assertj-core:$assertjVersion",
            ],
            integrationTest: [
                    "org.springframework.boot:spring-boot-starter-test:$springBootVersion",
                    "org.springframework.boot:spring-boot-starter-web:$springBootVersion",
                    "org.slf4j:jcl-over-slf4j:${slf4jVersion}",
                    "org.slf4j:jul-to-slf4j:${slf4jVersion}",
                    "ch.qos.logback:logback-classic:${logbackVersion}"
            ]
    ]
}

dependencies {
    implementation libs.runtime
    testImplementation libs.test
    testImplementation libs.integrationTest
}

def isNonStable = { version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}